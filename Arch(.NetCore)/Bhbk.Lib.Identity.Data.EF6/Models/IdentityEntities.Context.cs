//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bhbk.Lib.Identity.Data.EF6.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IdentityEntities : DbContext
    {
        public IdentityEntities()
            : base("name=IdentityEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<uvw_Activities> uvw_Activities { get; set; }
        public virtual DbSet<uvw_Audiences> uvw_Audiences { get; set; }
        public virtual DbSet<uvw_Claims> uvw_Claims { get; set; }
        public virtual DbSet<uvw_Issuers> uvw_Issuers { get; set; }
        public virtual DbSet<uvw_Users> uvw_Users { get; set; }
        public virtual DbSet<tbl_Activities> tbl_Activities { get; set; }
        public virtual DbSet<tbl_AudienceRoles> tbl_AudienceRoles { get; set; }
        public virtual DbSet<tbl_Audiences> tbl_Audiences { get; set; }
        public virtual DbSet<tbl_Claims> tbl_Claims { get; set; }
        public virtual DbSet<tbl_Issuers> tbl_Issuers { get; set; }
        public virtual DbSet<tbl_Logins> tbl_Logins { get; set; }
        public virtual DbSet<tbl_MOTDs> tbl_MOTDs { get; set; }
        public virtual DbSet<tbl_QueueEmails> tbl_QueueEmails { get; set; }
        public virtual DbSet<tbl_QueueTexts> tbl_QueueTexts { get; set; }
        public virtual DbSet<tbl_Refreshes> tbl_Refreshes { get; set; }
        public virtual DbSet<tbl_RoleClaims> tbl_RoleClaims { get; set; }
        public virtual DbSet<tbl_Roles> tbl_Roles { get; set; }
        public virtual DbSet<tbl_Settings> tbl_Settings { get; set; }
        public virtual DbSet<tbl_States> tbl_States { get; set; }
        public virtual DbSet<tbl_Urls> tbl_Urls { get; set; }
        public virtual DbSet<tbl_UserClaims> tbl_UserClaims { get; set; }
        public virtual DbSet<tbl_UserLogins> tbl_UserLogins { get; set; }
        public virtual DbSet<tbl_UserRoles> tbl_UserRoles { get; set; }
        public virtual DbSet<tbl_Users> tbl_Users { get; set; }
    
        public virtual int usp_Activity_Delete(Nullable<System.Guid> activityID)
        {
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Activity_Delete", activityIDParameter);
        }
    
        public virtual int usp_Activity_Insert(Nullable<System.Guid> id, Nullable<System.Guid> audienceId, Nullable<System.Guid> userId, string activityType, string tableName, string keyValues, string originalValues, string currentValues, Nullable<System.DateTime> created, Nullable<bool> immutable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var audienceIdParameter = audienceId.HasValue ?
                new ObjectParameter("AudienceId", audienceId) :
                new ObjectParameter("AudienceId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var keyValuesParameter = keyValues != null ?
                new ObjectParameter("KeyValues", keyValues) :
                new ObjectParameter("KeyValues", typeof(string));
    
            var originalValuesParameter = originalValues != null ?
                new ObjectParameter("OriginalValues", originalValues) :
                new ObjectParameter("OriginalValues", typeof(string));
    
            var currentValuesParameter = currentValues != null ?
                new ObjectParameter("CurrentValues", currentValues) :
                new ObjectParameter("CurrentValues", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var immutableParameter = immutable.HasValue ?
                new ObjectParameter("Immutable", immutable) :
                new ObjectParameter("Immutable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Activity_Insert", idParameter, audienceIdParameter, userIdParameter, activityTypeParameter, tableNameParameter, keyValuesParameter, originalValuesParameter, currentValuesParameter, createdParameter, immutableParameter);
        }
    
        public virtual int usp_Audience_Delete(Nullable<System.Guid> audienceID)
        {
            var audienceIDParameter = audienceID.HasValue ?
                new ObjectParameter("AudienceID", audienceID) :
                new ObjectParameter("AudienceID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Audience_Delete", audienceIDParameter);
        }
    
        public virtual int usp_Claim_Delete(Nullable<System.Guid> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Claim_Delete", claimIDParameter);
        }
    
        public virtual int usp_Claim_Insert(Nullable<System.Guid> id, Nullable<System.Guid> issuerId, Nullable<System.Guid> actorId, string subject, string type, string value, string valueType, Nullable<System.DateTime> created, Nullable<System.DateTime> lastUpdated, Nullable<bool> immutable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var issuerIdParameter = issuerId.HasValue ?
                new ObjectParameter("IssuerId", issuerId) :
                new ObjectParameter("IssuerId", typeof(System.Guid));
    
            var actorIdParameter = actorId.HasValue ?
                new ObjectParameter("ActorId", actorId) :
                new ObjectParameter("ActorId", typeof(System.Guid));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var lastUpdatedParameter = lastUpdated.HasValue ?
                new ObjectParameter("LastUpdated", lastUpdated) :
                new ObjectParameter("LastUpdated", typeof(System.DateTime));
    
            var immutableParameter = immutable.HasValue ?
                new ObjectParameter("Immutable", immutable) :
                new ObjectParameter("Immutable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Claim_Insert", idParameter, issuerIdParameter, actorIdParameter, subjectParameter, typeParameter, valueParameter, valueTypeParameter, createdParameter, lastUpdatedParameter, immutableParameter);
        }
    
        public virtual int usp_Claim_Update(Nullable<System.Guid> id, Nullable<System.Guid> issuerId, Nullable<System.Guid> actorId, string subject, string type, string value, string valueType, Nullable<System.DateTime> created, Nullable<System.DateTime> lastUpdated, Nullable<bool> immutable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var issuerIdParameter = issuerId.HasValue ?
                new ObjectParameter("IssuerId", issuerId) :
                new ObjectParameter("IssuerId", typeof(System.Guid));
    
            var actorIdParameter = actorId.HasValue ?
                new ObjectParameter("ActorId", actorId) :
                new ObjectParameter("ActorId", typeof(System.Guid));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var lastUpdatedParameter = lastUpdated.HasValue ?
                new ObjectParameter("LastUpdated", lastUpdated) :
                new ObjectParameter("LastUpdated", typeof(System.DateTime));
    
            var immutableParameter = immutable.HasValue ?
                new ObjectParameter("Immutable", immutable) :
                new ObjectParameter("Immutable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Claim_Update", idParameter, issuerIdParameter, actorIdParameter, subjectParameter, typeParameter, valueParameter, valueTypeParameter, createdParameter, lastUpdatedParameter, immutableParameter);
        }
    
        public virtual int usp_Issuer_Delete(Nullable<System.Guid> issuerID)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("IssuerID", issuerID) :
                new ObjectParameter("IssuerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Issuer_Delete", issuerIDParameter);
        }
    
        public virtual int usp_User_Delete(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Delete", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_User_Insert(Nullable<System.Guid> id, Nullable<System.Guid> actorId, string email, Nullable<bool> emailConfirmed, string firstName, string lastName, string phoneNumber, Nullable<bool> phoneNumberConfirmed, Nullable<System.DateTime> created, Nullable<System.DateTime> lastUpdated, Nullable<bool> lockoutEnabled, Nullable<System.DateTimeOffset> lockoutEnd, Nullable<System.DateTime> lastLoginSuccess, Nullable<System.DateTime> lastLoginFailure, Nullable<int> accessFailedCount, Nullable<int> accessSuccessCount, string concurrencyStamp, string passwordHash, Nullable<bool> passwordConfirmed, string securityStamp, Nullable<bool> twoFactorEnabled, Nullable<bool> humanBeing, Nullable<bool> immutable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var actorIdParameter = actorId.HasValue ?
                new ObjectParameter("ActorId", actorId) :
                new ObjectParameter("ActorId", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberConfirmedParameter = phoneNumberConfirmed.HasValue ?
                new ObjectParameter("PhoneNumberConfirmed", phoneNumberConfirmed) :
                new ObjectParameter("PhoneNumberConfirmed", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var lastUpdatedParameter = lastUpdated.HasValue ?
                new ObjectParameter("LastUpdated", lastUpdated) :
                new ObjectParameter("LastUpdated", typeof(System.DateTime));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            var lockoutEndParameter = lockoutEnd.HasValue ?
                new ObjectParameter("LockoutEnd", lockoutEnd) :
                new ObjectParameter("LockoutEnd", typeof(System.DateTimeOffset));
    
            var lastLoginSuccessParameter = lastLoginSuccess.HasValue ?
                new ObjectParameter("LastLoginSuccess", lastLoginSuccess) :
                new ObjectParameter("LastLoginSuccess", typeof(System.DateTime));
    
            var lastLoginFailureParameter = lastLoginFailure.HasValue ?
                new ObjectParameter("LastLoginFailure", lastLoginFailure) :
                new ObjectParameter("LastLoginFailure", typeof(System.DateTime));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var accessSuccessCountParameter = accessSuccessCount.HasValue ?
                new ObjectParameter("AccessSuccessCount", accessSuccessCount) :
                new ObjectParameter("AccessSuccessCount", typeof(int));
    
            var concurrencyStampParameter = concurrencyStamp != null ?
                new ObjectParameter("ConcurrencyStamp", concurrencyStamp) :
                new ObjectParameter("ConcurrencyStamp", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var passwordConfirmedParameter = passwordConfirmed.HasValue ?
                new ObjectParameter("PasswordConfirmed", passwordConfirmed) :
                new ObjectParameter("PasswordConfirmed", typeof(bool));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var twoFactorEnabledParameter = twoFactorEnabled.HasValue ?
                new ObjectParameter("TwoFactorEnabled", twoFactorEnabled) :
                new ObjectParameter("TwoFactorEnabled", typeof(bool));
    
            var humanBeingParameter = humanBeing.HasValue ?
                new ObjectParameter("HumanBeing", humanBeing) :
                new ObjectParameter("HumanBeing", typeof(bool));
    
            var immutableParameter = immutable.HasValue ?
                new ObjectParameter("Immutable", immutable) :
                new ObjectParameter("Immutable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_User_Insert", idParameter, actorIdParameter, emailParameter, emailConfirmedParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, phoneNumberConfirmedParameter, createdParameter, lastUpdatedParameter, lockoutEnabledParameter, lockoutEndParameter, lastLoginSuccessParameter, lastLoginFailureParameter, accessFailedCountParameter, accessSuccessCountParameter, concurrencyStampParameter, passwordHashParameter, passwordConfirmedParameter, securityStampParameter, twoFactorEnabledParameter, humanBeingParameter, immutableParameter);
        }
    
        public virtual int usp_User_Update(Nullable<System.Guid> id, Nullable<System.Guid> actorId, string email, Nullable<bool> emailConfirmed, string firstName, string lastName, string phoneNumber, Nullable<bool> phoneNumberConfirmed, Nullable<System.DateTime> created, Nullable<System.DateTime> lastUpdated, Nullable<bool> lockoutEnabled, Nullable<System.DateTimeOffset> lockoutEnd, Nullable<System.DateTime> lastLoginSuccess, Nullable<System.DateTime> lastLoginFailure, Nullable<int> accessFailedCount, Nullable<int> accessSuccessCount, string concurrencyStamp, string passwordHash, Nullable<bool> passwordConfirmed, string securityStamp, Nullable<bool> twoFactorEnabled, Nullable<bool> humanBeing, Nullable<bool> immutable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var actorIdParameter = actorId.HasValue ?
                new ObjectParameter("ActorId", actorId) :
                new ObjectParameter("ActorId", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberConfirmedParameter = phoneNumberConfirmed.HasValue ?
                new ObjectParameter("PhoneNumberConfirmed", phoneNumberConfirmed) :
                new ObjectParameter("PhoneNumberConfirmed", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var lastUpdatedParameter = lastUpdated.HasValue ?
                new ObjectParameter("LastUpdated", lastUpdated) :
                new ObjectParameter("LastUpdated", typeof(System.DateTime));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            var lockoutEndParameter = lockoutEnd.HasValue ?
                new ObjectParameter("LockoutEnd", lockoutEnd) :
                new ObjectParameter("LockoutEnd", typeof(System.DateTimeOffset));
    
            var lastLoginSuccessParameter = lastLoginSuccess.HasValue ?
                new ObjectParameter("LastLoginSuccess", lastLoginSuccess) :
                new ObjectParameter("LastLoginSuccess", typeof(System.DateTime));
    
            var lastLoginFailureParameter = lastLoginFailure.HasValue ?
                new ObjectParameter("LastLoginFailure", lastLoginFailure) :
                new ObjectParameter("LastLoginFailure", typeof(System.DateTime));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var accessSuccessCountParameter = accessSuccessCount.HasValue ?
                new ObjectParameter("AccessSuccessCount", accessSuccessCount) :
                new ObjectParameter("AccessSuccessCount", typeof(int));
    
            var concurrencyStampParameter = concurrencyStamp != null ?
                new ObjectParameter("ConcurrencyStamp", concurrencyStamp) :
                new ObjectParameter("ConcurrencyStamp", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var passwordConfirmedParameter = passwordConfirmed.HasValue ?
                new ObjectParameter("PasswordConfirmed", passwordConfirmed) :
                new ObjectParameter("PasswordConfirmed", typeof(bool));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var twoFactorEnabledParameter = twoFactorEnabled.HasValue ?
                new ObjectParameter("TwoFactorEnabled", twoFactorEnabled) :
                new ObjectParameter("TwoFactorEnabled", typeof(bool));
    
            var humanBeingParameter = humanBeing.HasValue ?
                new ObjectParameter("HumanBeing", humanBeing) :
                new ObjectParameter("HumanBeing", typeof(bool));
    
            var immutableParameter = immutable.HasValue ?
                new ObjectParameter("Immutable", immutable) :
                new ObjectParameter("Immutable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Update", idParameter, actorIdParameter, emailParameter, emailConfirmedParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, phoneNumberConfirmedParameter, createdParameter, lastUpdatedParameter, lockoutEnabledParameter, lockoutEndParameter, lastLoginSuccessParameter, lastLoginFailureParameter, accessFailedCountParameter, accessSuccessCountParameter, concurrencyStampParameter, passwordHashParameter, passwordConfirmedParameter, securityStampParameter, twoFactorEnabledParameter, humanBeingParameter, immutableParameter);
        }
    }
}
